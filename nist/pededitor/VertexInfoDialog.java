package gov.nist.pededitor;

import java.awt.Frame;
import java.awt.geom.Point2D;

import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.codehaus.jackson.annotate.JsonIgnore;

/** GUI to display information about a tangency point in the
    diagram. */
public class VertexInfoDialog extends JDialog {
    private static final long serialVersionUID = 1686051698640332170L;

    // TODO Use diagram components to determine slope.

    protected JTextField angle = new JTextField(9);
    protected JTextField slope = new JTextField(12);

    /** These values provide greater precision than angle.getText()
     * and slope.getText() do. */

    protected double angled = 0;
    protected double sloped = 0;
    protected double lineWidthd = 0;

    public boolean selfModifying = false;
    JLabel slopeLabel;
    public JLabel lineWidth = new JLabel("0.00000");

    public VertexInfoDialog(Frame owner) {
        super(owner, "Tangent", false);
        setAngleDegrees(0);
        setSlope(0);

        slope.getDocument().addDocumentListener
            (new DocumentListener() {
                    @Override public void changedUpdate(DocumentEvent e) {
                        if (selfModifying) {
                            // This event was presumably generated by
                            // another event.
                            return;
                        }
                        try {
                            selfModifying = true;
                            sloped = ContinuedFraction.parseDouble(slope.getText());
                            setAngle(slopeToTheta(sloped));
                        } catch (NumberFormatException ex) {
                            return;
                        } finally {
                            selfModifying = false;
                        }
                    }

                    @Override public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }

                    @Override public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                });

        angle.getDocument().addDocumentListener
            (new DocumentListener() {
                    @Override public void changedUpdate(DocumentEvent e) {
                        if (selfModifying) {
                            // This event was presumably generated by
                            // another event.
                            return;
                        }
                        try {
                            selfModifying = true;
                            angled = ContinuedFraction.parseDouble(angle.getText());
                            setSlope(thetaToSlope(degreesToTheta(angled)));
                        } catch (NumberFormatException ex) {
                            return;
                        } finally {
                            selfModifying = false;
                        }
                    }

                    @Override public void insertUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }

                    @Override public void removeUpdate(DocumentEvent e) {
                        changedUpdate(e);
                    }
                });

        GridBagUtil gb = new GridBagUtil(getContentPane());

        gb.addEast(new JLabel("Angle:"));
        gb.addWest(angle);
        gb.endRowWith(new JLabel("\u00B0") /* degree symbol */);

        gb.addEast(new JLabel("Slope:"));
        gb.endRowWith(slope);

        gb.addEast(new JLabel("Line width:"));
        gb.endRowWith(lineWidth);
        pack();
        setDerivative(null);
        setLineWidth(0.0);
    }

    public void setDerivative(Point2D point) {
        double x = (point == null) ? 0 : point.getX();
        double y = (point == null) ? 0 : point.getY();
        if (x == 0 && y == 0) {
            angle.setText("");
            slope.setText("");
            angled = Double.NaN;
            sloped = Double.NaN;
            return;
        }

        if (x == 0) {
            sloped = (y > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
            slope.setText("");
        } else {
            setSlope(y/x);
        }

        setAngle(Math.atan2(y, x));
    }

    public double thetaToDegrees(double theta) {
        double deg = -theta * 180 / Math.PI;
        if (deg < -90) {
            deg += 180;
        } else if (deg > 90) {
            deg -= 180;
        }
        return deg;
    }

    public double degreesToTheta(double deg) {
        return -deg * Math.PI / 180;
    }

    public double thetaToSlope(double theta) {
        return Math.tan(theta);
    }

    public double slopeToTheta(double s) {
        return -Math.atan2(s, 1);
    }

    public void setAngle(double theta) {
        setAngleDegrees(thetaToDegrees(theta));
    }

    public void setAngleDegrees(double deg) {
        angled = deg;
        angle.setText(String.format("%.2f", deg));
        repaint();
    }

    @JsonIgnore public double getAngleDegrees() {
        return angled;
    }

    /** Return the angle in radians, where 0 is straight right and
        values increase clockwise. */
    public double getAngle() {
        return Compass.degreesToTheta(angled);
    }

    public void setSlope(double m) {
        sloped = -m;
        slope.setText(String.format("%.4f", -m));
        repaint();
    }

    public void setSlopeLabel(String label) {
        slopeLabel.setText(label + ":");
        repaint();
    }

    public double getSlope() {
        return sloped;
    }

    public void setLineWidth(double w) {
        lineWidthd = w;
        lineWidth.setText(String.format("%.5f", w));
        repaint();
    }

    public double getLineWidth() {
        return lineWidthd;
    }
}
